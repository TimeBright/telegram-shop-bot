import os
import logging
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å –ø–æ—á—Ç—ã
SMTP_SERVER = "smtp.yandex.ru"
SMTP_PORT = 465
YANDEX_PASSWORD = os.getenv('YANDEX_PASSWORD')
SENDER_EMAIL = "sale@introlaser.ru"  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

def create_order_email_template(order_details):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ HTML —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –ø–∏—Å—å–º–∞ –æ –∑–∞–∫–∞–∑–µ"""
    return f"""
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #2c3e50;">üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!</h2>

        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <p style="font-size: 16px; color: #34495e;">
                ‚ÑπÔ∏è <strong>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</strong><br>
                üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_details.get('order_id', 'N/A')}<br>
                üìÖ –î–∞—Ç–∞: {order_details.get('date', 'N/A')}<br>
                üí∞ –°—É–º–º–∞: {order_details.get('amount', '0')} —Ä—É–±.
            </p>
        </div>

        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
            <p style="font-size: 16px; color: #34495e;">
                üìç <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:</strong><br>
                üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order_details.get('customer_name', 'N/A')}<br>
                üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order_details.get('phone', 'N/A')}<br>
                ‚úâÔ∏è Email: {order_details.get('email', 'N/A')}<br>
                üè† –ê–¥—Ä–µ—Å: {order_details.get('address', 'N/A')}
            </p>
        </div>
    </div>
    """

def send_email(
    to_email: str,
    subject: str,
    text_content: str | None = None,
    html_content: str | None = None
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å SMTP
    """
    try:
        logger.info(f"Attempting to send email to {to_email}")
        logger.info(f"Subject: {subject}")

        if not YANDEX_PASSWORD:
            logger.error('YANDEX_PASSWORD environment variable must be set')
            return False

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEMultipart('alternative')
        msg['Subject'] = subject
        msg['From'] = SENDER_EMAIL
        msg['To'] = to_email

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if text_content:
            text_lines = [line.strip() for line in text_content.splitlines() if line.strip()]
            formatted_text = '\n'.join(text_lines)
            msg.attach(MIMEText(formatted_text, 'plain'))
            logger.info("Text content attached to email")
        if html_content:
            msg.attach(MIMEText(html_content, 'html'))
            logger.info("HTML content attached to email")
        elif not text_content:
            logger.error('Either text_content or html_content must be provided')
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        with smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT) as server:
            server.login(SENDER_EMAIL, YANDEX_PASSWORD)
            server.send_message(msg)
            logger.info(f"Email sent successfully to {to_email}")
            return True

    except Exception as e:
        logger.error(f"Error sending email: {str(e)}", exc_info=True)
        return False