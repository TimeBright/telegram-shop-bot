"""Shop module for the Telegram bot."""
import logging
import os
from datetime import datetime, timedelta
import pytz
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from .database import get_db
from .models import Product
from .states import ShopStates
from .protected_handlers import (
    create_base_keyboard,
    shop_command_handler,
    category_handler,
    show_product_category,
    handle_photo_navigation
)
from src.receipt_processor.image_processor import process_image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_moscow_time():
    """Returns the current time in Moscow (MSK)."""
    moscow_tz = pytz.timezone('Europe/Moscow')
    return datetime.now(moscow_tz)


async def process_cart_checkout(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"Starting checkout process for user {user_id}")

        data = await state.get_data()
        cart = data.get('cart', {})

        if not cart:
            await message.answer(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
                reply_markup=create_base_keyboard()
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        total_sum = sum(item['price'] * item['quantity'] for item in cart.values())
        order_info = "üìã –í–∞—à –∑–∞–∫–∞–∑:\n\n"

        for product_id, item in cart.items():
            subtotal = item['price'] * item['quantity']
            order_info += (
                f"üì¶ {item['name']}\n"
                f"üí∞ {item['price']:,.2f}‚ÇΩ x {item['quantity']} —à—Ç. = {subtotal:,.2f}‚ÇΩ\n\n"
            )

        order_info += f"\nüí∞ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_sum:,.2f}‚ÇΩ"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        await message.answer(
            f"{order_info}\n\n"
            "üìù –ü–æ—Ä—è–¥–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:\n\n"
            "1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            "   - –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
            "   - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n"
            "   - –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n"
            "3Ô∏è‚É£ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —á–µ–∫\n\n"
            "4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —á–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
            "5Ô∏è‚É£ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ '–û—Ñ–æ—Ä–º–ª–µ–Ω'\n\n"
            "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
        )

        await state.update_data(total_sum=total_sum, cart=cart)
        await state.set_state(ShopStates.WAITING_FOR_CUSTOMER_NAME)
        logger.info(f"Requesting customer name for user {user_id}")

    except Exception as e:
        logger.error(f"Error in process_cart_checkout: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_base_keyboard()
        )
        await state.clear()

async def process_customer_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        customer_name = message.text.strip()
        logger.info(f"Processing customer name for user {user_id}: {customer_name}")

        if len(customer_name) < 2:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û")
            return

        await state.update_data(customer_name=customer_name)
        await message.answer(
            "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: +7XXXXXXXXXX"
        )
        await state.set_state(ShopStates.WAITING_FOR_CUSTOMER_PHONE)
        logger.info(f"Customer name saved: {customer_name}, requesting phone for user {user_id}")

    except Exception as e:
        logger.error(f"Error in process_customer_name: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

async def process_customer_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        phone = message.text.strip()
        logger.info(f"Processing phone for user {user_id}: {phone}")

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not phone.replace('+', '').isdigit() or len(phone) < 10:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: +7XXXXXXXXXX"
            )
            return

        await state.update_data(phone=phone)
        await message.answer(
            "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:"
        )
        await state.set_state(ShopStates.WAITING_FOR_CUSTOMER_EMAIL)
        logger.info(f"Phone saved: {phone}, requesting email for user {user_id}")

    except Exception as e:
        logger.error(f"Error in process_customer_phone: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

async def process_customer_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        email = message.text.strip().lower()
        logger.info(f"Processing email for user {user_id}: {email}")
        logger.info(f"Current state before processing: {await state.get_state()}")

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        if '@' not in email or '.' not in email or len(email) < 5:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
            return

        await state.update_data(customer_email=email)
        logger.info(f"Email saved: {email}, updating state for user {user_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
        current_state = await state.get_state()
        if current_state != ShopStates.WAITING_FOR_CUSTOMER_EMAIL.state:
            logger.error(f"Unexpected state after email input: {current_state}")
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await state.set_state(ShopStates.WAITING_FOR_DELIVERY_ADDRESS)
        logger.info(f"State set to WAITING_FOR_DELIVERY_ADDRESS for user {user_id}")

        await message.answer(
            "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            "(—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –≥–æ—Ä–æ–¥)"
        )

    except Exception as e:
        logger.error(f"Error in process_customer_email: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        user_id = message.from_user.id
        address = message.text.strip()
        logger.info(f"Processing delivery address for user {user_id}: {address}")

        if len(address) < 10:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        await state.update_data(delivery_address=address)
        data = await state.get_data()
        total_sum = data.get('total_sum', 0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
        payment_message = (
            "üí≥ –ü–æ—Ä—è–¥–æ–∫ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:\n\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_sum:,.2f}‚ÇΩ\n\n"
            "1Ô∏è‚É£ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
            "https://qr.nspk.ru/AS20006OKC648VO0845BQH1MD028D7B8?type=01&bank=100000000005&sum=5000&cur=RUB&crc=1443\n\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —á–µ–∫ –∏–∑ –±–∞–Ω–∫–∞\n\n"
            "3Ô∏è‚É£ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n"
            "4Ô∏è‚É£ –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ–∫ –∏ –ø–æ–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ '–û—Ñ–æ—Ä–º–ª–µ–Ω'\n"
            "   –∏ –ø—Ä–∏—à–ª–µ–º –≤–∞–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email\n\n"
            "‚ö†Ô∏è –í–∞–∂–Ω–æ: –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞"
        )

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —á–µ–∫–∞
        await state.set_state(ShopStates.WAITING_FOR_RECEIPT)
        current_state = await state.get_state()
        logger.info(f"Set state to WAITING_FOR_RECEIPT for user {user_id}, current state: {current_state}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        await message.answer(payment_message)
        logger.info(f"Payment instructions sent to user {user_id}")

    except Exception as e:
        logger.error(f"Error in process_delivery_address: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

async def handle_text_in_receipt_state(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —á–µ–∫–∞"""
    try:
        current_state = await state.get_state()
        logger.info(f"Handling text message in receipt state for user {message.from_user.id}")
        logger.info(f"Current state: {current_state}")

        if current_state == ShopStates.WAITING_FOR_RECEIPT.state:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
            )
            logger.info(f"Sent reminder to upload receipt photo to user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in handle_text_in_receipt_state: {str(e)}", exc_info=True)

async def process_payment_receipt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ (—Ñ–æ—Ç–æ –∏–ª–∏ PDF)"""
    try:
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç)
        file = None
        file_path = None
        temp_file = None
        is_photo = False

        if message.photo:
            photo = message.photo[-1]
            file = await message.bot.get_file(photo.file_id)
            file_path = file.file_path
            is_photo = True
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ —á–µ–∫–∞: {file.file_id}")
        elif message.document and message.document.mime_type == 'application/pdf':
            file = await message.bot.get_file(message.document.file_id)
            file_path = file.file_path
            logger.info(f"–ü–æ–ª—É—á–µ–Ω PDF –¥–æ–∫—É–º–µ–Ω—Ç: {file.file_id}")
        else:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞."
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ...")

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            photo_bytes = await message.bot.download_file(file_path)
            logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω")

            ext = '.jpg' if is_photo else '.pdf'
            temp_file = f"temp_{user_id}_{message.message_id}{ext}"

            with open(temp_file, 'wb') as f:
                f.write(photo_bytes.read())
            logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {temp_file}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É (MSK)
            current_date = get_moscow_time().date()
            logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–ú–°–ö): {current_date}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞
            success, receipt_date, receipt_path, message_text = process_image(temp_file, user_id)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞: success={success}, receipt_date={receipt_date}, message={message_text}")

            if not success:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞: {message_text}")
                await message.answer(f"‚ùå {message_text}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —á–µ–∫–∞
            if receipt_date != current_date:
                logger.warning(f"–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞—Ç: —á–µ–∫={receipt_date}, —Ç–µ–∫—É—â–∞—è={current_date}")
                await message.answer(
                    "‚ùå –î–∞—Ç–∞ –≤ —á–µ–∫–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–∞—Ç–æ–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n"
                    "–ó–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç."
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
            data = await state.get_data()
            customer_name = data.get('customer_name', '')
            customer_email = data.get('customer_email', '')
            delivery_address = data.get('delivery_address', '')
            phone = data.get('phone', '')
            cart = data.get('cart', {})
            # expected_amount = data.get('total_sum') # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É–º–º—ã

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–∏—Å–µ–º
            order_details = (
                f"üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {customer_name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üìß Email: {customer_email}\n"
                f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n"
            )

            for product_id, item in cart.items():
                subtotal = item['price'] * item['quantity']
                order_details += (
                    f"- {item['name']}\n"
                    f"  {item['price']}‚ÇΩ x {item['quantity']} —à—Ç. = {subtotal}‚ÇΩ\n"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º —á–µ–∫–∞
            admin_email = os.getenv('ADMIN_EMAIL', 'sale@introlaser.ru')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await send_email_notification(
                admin_email,
                "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑",
                order_details,
                receipt_path
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –Ω–∞ {admin_email}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
            client_message = (
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {customer_name}!\n\n"
                f"–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ–ø–ª–∞—á–µ–Ω.\n\n"
                f"üì¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"
                f"{order_details}\n\n"
                f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
            )

            await send_email_notification(
                customer_email,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
                client_message,
                receipt_path
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ {customer_email}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
            await message.answer(
                "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email."
            )

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å "–æ–ø–ª–∞—á–µ–Ω"
            await state.set_state(ShopStates.ORDER_PAID)
            logger.info(f"–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å PAID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞: {str(e)}", exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ–∫–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            if temp_file and os.path.exists(temp_file):
                os.remove(temp_file)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_file}")
            await processing_msg.delete()

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ process_payment_receipt: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await state.clear()

async def cart_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        user_id = message.from_user.id
        logger.info(f"Processing cart for user {user_id}")

        data = await state.get_data()
        cart = data.get('cart', {})

        if not cart:
            await message.answer(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                reply_markup=create_base_keyboard()
            )
            return

        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        total_sum = 0
        buttons = []

        db = get_db()
        for product_id, item in cart.items():
            product = db.query(Product).filter(Product.id == int(product_id)).first()
            if not product:
                continue

            subtotal = item['price'] * item['quantity']
            total_sum += subtotal

            cart_text += (
                f"üì¶ {item['name']}\n"
                f"üí∞ {item['price']:,.0f}‚ÇΩ x {item['quantity']} —à—Ç. = {subtotal:,.0f}‚ÇΩ\n\n"
            )

            buttons.append([
                InlineKeyboardButton(text="‚ûñ", callback_data=f"cart_decrease_{product_id}"),
                InlineKeyboardButton(text=f"{item['quantity']} —à—Ç.", callback_data=f"cart_info_{product_id}"),
                InlineKeyboardButton(text="‚ûï", callback_data=f"cart_increase_{product_id}")
            ])
            buttons.append([
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"cart_remove_{product_id}")
            ])

        cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total_sum:,.0f}‚ÇΩ"

        buttons.append([
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart_clear"),
            InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cart_checkout")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(cart_text, reply_markup=keyboard)
        logger.info(f"Cart info sent to user {user_id}")

    except Exception as e:
        logger.error(f"Error in cart_handler: {str(e)}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã",
            reply_markup=create_base_keyboard()
        )

async def process_cart_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        action = callback.data.split('_')[1]
        product_id = callback.data.split('_')[2] if len(callback.data.split('_')) > 2 else None

        user_data = await state.get_data()
        cart = user_data.get('cart', {})

        if action == "clear":
            await state.update_data(cart={})
            await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
            await callback.answer("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
            return

        if action == "checkout":
            await callback.answer("‚è≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞")
            await process_cart_checkout(callback.message, state)
            return

        if not product_id or product_id not in cart:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            return

        if action == "increase":
            cart[product_id]['quantity'] += 1
            await callback.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ {cart[product_id]['quantity']}")

        elif action == "decrease":
            if cart[product_id]['quantity'] > 1:
                cart[product_id]['quantity'] -= 1
                await callback.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ {cart[product_id]['quantity']}")
            else:
                await callback.answer("‚ùå –ù–µ–ª—å–∑—è —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ 1")

        elif action == "remove":
            del cart[product_id]
            await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")

        await state.update_data(cart=cart)

        if cart:
            await cart_handler(callback.message, state)
        else:
            await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")

    except Exception as e:
        logger.error(f"Error in process_cart_callback: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è")

async def process_add_to_cart_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        product_id = str(callback.data.split('_')[-1])
        logger.info(f"Processing add to cart callback for product {product_id}")

        db = get_db()
        product = db.query(Product).filter(Product.id == int(product_id)).first()

        if not product:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        data = await state.get_data()
        cart = data.get('cart', {})

        if product_id in cart:
            cart[product_id]['quantity'] += 1
        else:
            cart[product_id] = {
                'name': product.name,
                'price': float(product.price),
                'quantity': 1
            }

        await state.update_data(cart=cart)
        total_items = sum(item['quantity'] for item in cart.values())

        await callback.answer(
            f"‚úÖ {product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É (–≤—Å–µ–≥–æ: {total_items} —à—Ç.)"
        )

    except Exception as e:
        logger.error(f"Error in process_add_to_cart_callback: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É")

async def register_shop_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞"""
    try:
        logger.info("Starting shop handlers registration")

        # 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Å—Ç—Ä–æ–≥–æ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ)
        dp.message.register(process_customer_name, ShopStates.WAITING_FOR_CUSTOMER_NAME)
        dp.message.register(process_customer_phone, ShopStates.WAITING_FOR_CUSTOMER_PHONE)
        dp.message.register(process_customer_email, ShopStates.WAITING_FOR_CUSTOMER_EMAIL)
        dp.message.register(process_delivery_address, ShopStates.WAITING_FOR_DELIVERY_ADDRESS)
        dp.message.register(handle_text_in_receipt_state, F.text, ShopStates.WAITING_FOR_RECEIPT)
        dp.message.register(process_payment_receipt, F.photo | (F.document.mime_type == 'application/pdf'), ShopStates.WAITING_FOR_RECEIPT)

        # 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–∞–≥–∞–∑–∏–Ω–∞
        dp.message.register(shop_command_handler, Command("shop"))
        dp.message.register(shop_command_handler, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω")
        dp.message.register(category_handler, F.text.in_(["üíÜ‚Äç‚ôÄÔ∏è –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è", "üîß –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"]))
        dp.message.register(cart_handler, F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")

        # 3. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.callback_query.register(process_cart_callback, F.data.startswith("cart_"))
        dp.callback_query.register(process_add_to_cart_callback, F.data.startswith("add_to_cart_"))
        dp.callback_query.register(handle_photo_navigation, F.data.startswith("photo_preview_"))
        dp.callback_query.register(
            handle_photo_navigation,
            F.data.startswith(("next_photo_", "prev_photo_", "photo_dot_"))
        )

        logger.info("All shop handlers registered successfully")

    except Exception as e:
        logger.error(f"Error registering shop handlers: {str(e)}")
        raise

async def handle_invalid_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        current_state = await state.get_state()
        logger.info(f"Invalid input handler called for user {user_id}")
        logger.info(f"Current state: {current_state}")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        if current_state in [
            ShopStates.WAITING_FOR_CUSTOMER_NAME.state,
            ShopStates.WAITING_FOR_CUSTOMER_PHONE.state,
            ShopStates.WAITING_FOR_CUSTOMER_EMAIL.state,
            ShopStates.WAITING_FOR_DELIVERY_ADDRESS.state,
            ShopStates.WAITING_FOR_RECEIPT.state
        ]:
            logger.info(f"Skipping invalid input handler for shop state: {current_state}")
            return

        logger.info(f"Processing invalid input from user {user_id}: {message.text}")

        help_message = (
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n"
            "üõç –ö–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–æ–∫\n"
            "üìù –ö–æ–º–∞–Ω–¥—É /o –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–∞\n"
            "‚ùì –ö–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
        )

        await message.answer(help_message, reply_markup=create_base_keyboard())
        logger.info(f"Sent help message to user {user_id}")

    except Exception as e:
        logger.error(f"Error in handle_invalid_input: {str(e)}", exc_info=True)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ–Ω—é –∏–ª–∏ /start")


async def initialize_test_products():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        logger.info("Starting test products initialization")
        db = get_db()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä—ã
        existing_products = db.query(Product).count()
        if existing_products > 0:
            logger.info("Products already exist, skipping initialization")
            return

        # –¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è
        cosmetics_products = [
            {
                "name": "–ö—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞ –æ–º–æ–ª–∞–∂–∏–≤–∞—é—â–∏–π",
                "description": "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –æ–º–æ–ª–∞–∂–∏–≤–∞—é—â–∏–π –∫—Ä–µ–º —Å –≥–∏–∞–ª—É—Ä–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç–æ–π",
                "price": 2500.00,
                "category": "cosmetics",
                "specifications": "–û–±—ä–µ–º: 50–º–ª, –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: –†–æ—Å—Å–∏—è",
                "available": True
            },
            {
                "name": "–ú–∞—Å–∫–∞ –¥–ª—è –≤–æ–ª–æ—Å –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è",
                "description": "–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—Å–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–æ–ª–æ—Å —Å –∫–µ—Ä–∞—Ç–∏–Ω–æ–º",
                "price": 1800.00,
                "category": "cosmetics",
                "specifications": "–û–±—ä–µ–º: 200–º–ª, –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: –§—Ä–∞–Ω—Ü–∏—è",
                "available": True
            }
        ]

        # –¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
        electronics_products = [
            {
                "name": "–§–µ–Ω –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
                "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–µ–Ω —Å –∏–æ–Ω–∏–∑–∞—Ü–∏–µ–π –∏ 3 —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã",
                "price": 5900.00,
                "category": "electronics",
                "specifications": "–ú–æ—â–Ω–æ—Å—Ç—å: 2200–í—Ç, 3 —Å–∫–æ—Ä–æ—Å—Ç–∏, 2 –Ω–∞—Å–∞–¥–∫–∏",
                "available": True
            },
            {
                "name": "–ú–∞—Å—Å–∞–∂–µ—Ä –¥–ª—è –ª–∏—Ü–∞",
                "description": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂–µ—Ä –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π –ª–∏—Ü–∞",
                "price": 3200.00,
                "category": "electronics",
                "specifications": "5 —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã, –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: 2000mAh",
                "available": True
            }
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        for product_data in cosmetics_products + electronics_products:
            product = Product(**product_data)
            db.add(product)
            logger.info(f"Added product: {product_data['name']}")

        db.commit()
        logger.info("Test products initialized successfully")

    except Exception as e:
        logger.error(f"Error initializing test products: {str(e)}", exc_info=True)
        db.rollback()
        raise

async def send_email_notification(recipient, subject, body, attachment_path):
    #Implementation for sending email with attachment
    pass