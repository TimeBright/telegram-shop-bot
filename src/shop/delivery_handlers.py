"""Handlers for delivery checkout process."""
import logging
import re
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, 
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from .database import get_db
from .models import Order, OrderItem
from .states import ShopStates
from .protected_handlers import create_base_keyboard

logger = logging.getLogger(__name__)

async def process_delivery_checkout(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        user_id = message.from_user.id
        logger.info(f"Starting delivery checkout for user {user_id}")

        data = await state.get_data()
        cart = data.get('cart', {})

        if not cart:
            await message.answer(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
                reply_markup=create_base_keyboard()
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        total_sum = sum(item['price'] * item['quantity'] for item in cart.values())
        info_message = (
            "üì¶ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
            "–ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —ç—Ç–∞–ø–æ–≤:\n\n"
            "1Ô∏è‚É£ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            "- –í–≤–æ–¥ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
            "- –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "- –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
            "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:\n"
            "- –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ QR-–∫–æ–¥ –∏–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ\n"
            "- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —á–µ–∫–∞\n"
            "- –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
            "3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n"
            "- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞\n"
            "- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n"
            "- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_sum:,.2f} —Ä—É–±.\n\n"
            "‚ùóÔ∏è –ù–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n"
            "‚úÖ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ?\n"
        )

        confirm_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")]
            ],
            resize_keyboard=True
        )

        await message.answer(info_message, reply_markup=confirm_keyboard)
        await state.set_state(ShopStates.WAITING_FOR_CUSTOMER_NAME)
        logger.info(f"Sent checkout info to user {user_id}")

    except Exception as e:
        logger.error(f"Error in process_delivery_checkout: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏",
            reply_markup=create_base_keyboard()
        )
        await state.clear()

async def process_customer_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ":
            await state.clear()
            await message.answer(
                "üõë –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=create_base_keyboard()
            )
            return

        if message.text == "‚úÖ –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
            await message.answer(
                "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")]],
                    resize_keyboard=True
                )
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        name = message.text.strip()
        if len(name) < 2:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)"
            )
            return

        await state.update_data(customer_name=name)
        logger.info(f"Saved customer name: {name}")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç':",
            reply_markup=phone_keyboard
        )

        await state.set_state(ShopStates.WAITING_FOR_CUSTOMER_PHONE)

    except Exception as e:
        logger.error(f"Error in process_customer_name: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏",
            reply_markup=create_base_keyboard()
        )
        await state.clear()

async def process_customer_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ":
            await state.clear()
            await message.answer(
                "üõë –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=create_base_keyboard()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç
        if message.contact:
            phone = message.contact.phone_number
        else:
            phone = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not re.match(r'^\+?[0-9]{10,12}$', phone.replace(' ', '')):
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: +79001234567"
            )
            return

        await state.update_data(customer_phone=phone)
        logger.info(f"Saved customer phone: {phone}")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
        address_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
            "–£–∫–∞–∂–∏—Ç–µ:\n"
            "- –ì–æ—Ä–æ–¥\n"
            "- –£–ª–∏—Ü—É\n"
            "- –ù–æ–º–µ—Ä –¥–æ–º–∞ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã\n"
            "- –ò–Ω–¥–µ–∫—Å (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω)",
            reply_markup=address_keyboard
        )

        await state.set_state(ShopStates.WAITING_FOR_DELIVERY_ADDRESS)

    except Exception as e:
        logger.error(f"Error in process_customer_phone: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=create_base_keyboard()
        )
        await state.clear()

async def process_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ":
            await state.clear()
            await message.answer(
                "üõë –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=create_base_keyboard()
            )
            return

        address = message.text.strip()
        if len(address) < 10:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
        await state.update_data(delivery_address=address)
        data = await state.get_data()
        logger.info(f"Saved delivery address: {address}")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        try:
            db = get_db()
            order = Order(
                user_id=str(message.from_user.id),
                customer_name=data['customer_name'],
                customer_phone=data['customer_phone'],
                delivery_address=address,
                total_amount=sum(item['price'] * item['quantity'] for item in data['cart'].values()),
                payment_status='pending'
            )
            db.add(order)
            db.commit()
            logger.info(f"Created order {order.id}")

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
            for product_id, item in data['cart'].items():
                order_item = OrderItem(
                    order_id=order.id,
                    product_id=int(product_id),
                    quantity=item['quantity'],
                    price=item['price']
                )
                db.add(order_item)
            db.commit()
            logger.info(f"Added items to order {order.id}")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –æ–ø–ª–∞—Ç—ã
            payment_info = (
                f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
                f"üë§ –§–ò–û: {data['customer_name']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['customer_phone']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {address}\n"
                f"üí∞ –°—É–º–º–∞: {order.total_amount:,.2f} —Ä—É–±.\n\n"
                f"üí≥ –ü–æ—Ä—è–¥–æ–∫ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:\n"
                f"1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                f"https://qr.nspk.ru/AS20006OKC648VO0845BQH1MD028D7B8?type=01&bank=100000000005&sum=5000&cur=RUB&crc=1443\n\n"
                f"2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —á–µ–∫ –∏–∑ –±–∞–Ω–∫–∞\n"
                f"3. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
                f"4. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ–∫ –∏ –ø–æ–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –û—Ñ–æ—Ä–º–ª–µ–Ω\n\n"
                f"‚ö†Ô∏è –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞"
            )

            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞
            await state.set_data({'current_order_id': order.id})
            await state.set_state(ShopStates.WAITING_FOR_PAYMENT_CONFIRMATION)

            await message.answer(payment_info, reply_markup=create_base_keyboard())
            logger.info(f"Order {order.id} created and ready for payment")

        except Exception as e:
            logger.error(f"Error saving order to database: {str(e)}", exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
                reply_markup=create_base_keyboard()
            )
            await state.clear()
            return

    except Exception as e:
        logger.error(f"Error in process_delivery_address: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞",
            reply_markup=create_base_keyboard()
        )
        await state.clear()

def register_delivery_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        logger.info("Registering delivery handlers")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
        dp.message.register(process_delivery_checkout, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
        dp.message.register(process_customer_name, ShopStates.WAITING_FOR_CUSTOMER_NAME)
        dp.message.register(process_customer_phone, ShopStates.WAITING_FOR_CUSTOMER_PHONE)
        dp.message.register(process_delivery_address, ShopStates.WAITING_FOR_DELIVERY_ADDRESS)

        logger.info("Delivery handlers registered successfully")

    except Exception as e:
        logger.error(f"Error registering delivery handlers: {str(e)}", exc_info=True)
        raise