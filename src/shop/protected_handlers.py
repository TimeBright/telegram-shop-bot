"""Protected handlers module for the shop.
WARNING: This file contains verified working code.
DO NOT MODIFY these handlers without explicit permission.
Last verified: 24.02.2025
"""

import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from .database import get_db
from .models import Product
from .states import ShopStates

logger = logging.getLogger(__name__)

def create_base_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞
    WARNING: This is a protected function. DO NOT MODIFY.
    Last verified: 24.02.2025
    """
    try:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="üíÜ‚Äç‚ôÄÔ∏è –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è"),
                    KeyboardButton(text="üîß –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞")
                ],
                [KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
                [KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
            ],
            resize_keyboard=True,
            persistent=True
        )
        logger.info("Base keyboard created successfully")
        return keyboard
    except Exception as e:
        logger.error(f"Error creating base keyboard: {str(e)}", exc_info=True)
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")]],
            resize_keyboard=True
        )

async def cart_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        user_id = message.from_user.id
        logger.info(f"Processing cart for user {user_id}")

        data = await state.get_data()
        cart = data.get('cart', {})

        if not cart:
            await message.answer(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                reply_markup=create_base_keyboard()
            )
            return

        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        total_sum = 0
        buttons = []

        db = get_db()
        for product_id, item in cart.items():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            product = db.query(Product).filter(Product.id == int(product_id)).first()
            if not product:
                continue

            subtotal = item['price'] * item['quantity']
            total_sum += subtotal

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            cart_text += (
                f"üì¶ {item['name']}\n"
                f"üí∞ {item['price']:,.0f}‚ÇΩ x {item['quantity']} —à—Ç. = {subtotal:,.0f}‚ÇΩ\n\n"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            buttons.append([
                InlineKeyboardButton(text="‚ûñ", callback_data=f"cart_decrease_{product_id}"),
                InlineKeyboardButton(text=f"{item['quantity']} —à—Ç.", callback_data=f"cart_info_{product_id}"),
                InlineKeyboardButton(text="‚ûï", callback_data=f"cart_increase_{product_id}")
            ])
            buttons.append([
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"cart_remove_{product_id}")
            ])

        cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total_sum:,.0f}‚ÇΩ"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ—Ä–∑–∏–Ω–æ–π
        buttons.append([
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart_clear"),
            InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cart_checkout")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(cart_text, reply_markup=keyboard)
        logger.info(f"Cart info sent to user {user_id}")

    except Exception as e:
        logger.error(f"Error in cart_handler: {str(e)}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã",
            reply_markup=create_base_keyboard()
        )

async def process_cart_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        action = callback.data.split('_')[1]
        product_id = callback.data.split('_')[2] if len(callback.data.split('_')) > 2 else None

        user_data = await state.get_data()
        cart = user_data.get('cart', {})

        if action == "clear":
            await state.update_data(cart={})
            await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
            await callback.answer("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
            return

        if action == "checkout":
            await callback.answer("‚è≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞")
            await process_cart_checkout(callback.message, state) # Assuming process_cart_checkout exists elsewhere
            return

        if not product_id or product_id not in cart:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            return

        if action == "increase":
            cart[product_id]['quantity'] += 1
            await callback.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ {cart[product_id]['quantity']}")

        elif action == "decrease":
            if cart[product_id]['quantity'] > 1:
                cart[product_id]['quantity'] -= 1
                await callback.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ {cart[product_id]['quantity']}")
            else:
                await callback.answer("‚ùå –ù–µ–ª—å–∑—è —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ 1")

        elif action == "remove":
            del cart[product_id]
            await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")

        await state.update_data(cart=cart)

        if cart:
            await cart_handler(callback.message, state)
        else:
            await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")

    except Exception as e:
        logger.error(f"Error in process_cart_callback: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è")

async def process_add_to_cart_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        product_id = str(callback.data.split('_')[-1])
        logger.info(f"Processing add to cart callback for product {product_id}")

        db = get_db()
        product = db.query(Product).filter(Product.id == int(product_id)).first()

        if not product:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        data = await state.get_data()
        cart = data.get('cart', {})

        if product_id in cart:
            cart[product_id]['quantity'] += 1
        else:
            cart[product_id] = {
                'name': product.name,
                'price': float(product.price),
                'quantity': 1
            }

        await state.update_data(cart=cart)
        total_items = sum(item['quantity'] for item in cart.values())

        await callback.answer(
            f"‚úÖ {product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É (–≤—Å–µ–≥–æ: {total_items} —à—Ç.)"
        )

    except Exception as e:
        logger.error(f"Error in process_add_to_cart_callback: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É")

async def shop_command_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–∞–≥–∞–∑–∏–Ω–∞
    WARNING: This is a protected handler. DO NOT MODIFY.
    Last verified: 24.02.2025
    """
    try:
        user_id = message.from_user.id
        logger.info(f"Shop command handler called for user {user_id}")

        await state.clear()
        logger.info(f"State cleared for user {user_id}")

        keyboard = create_base_keyboard()

        welcome_message = (
            "üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:\n"
            "üíÜ‚Äç‚ôÄÔ∏è –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è - —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –∏ –∑–¥–æ—Ä–æ–≤—å—è\n"
            "üîß –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ - —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üõí –ö–æ—Ä–∑–∏–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
        )

        await message.answer(welcome_message, reply_markup=keyboard)
        logger.info(f"Welcome message sent to user {user_id}")

    except Exception as e:
        logger.error(f"Error in shop_command_handler: {str(e)}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_base_keyboard()
        )

async def category_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    WARNING: This is a protected handler. DO NOT MODIFY.
    Last verified: 24.02.2025
    """
    try:
        user_id = message.from_user.id
        logger.info(f"Category handler called for user {user_id} with message: {message.text}")

        category = None
        if message.text == "üíÜ‚Äç‚ôÄÔ∏è –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è":
            category = "cosmetics"
            logger.info(f"User {user_id} selected –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è category")
        elif message.text == "üîß –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞":
            category = "electronics"
            logger.info(f"User {user_id} selected –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ category")

        if category:
            await show_product_category(message, state, category)
        else:
            logger.warning(f"Unknown category message: {message.text} from user {user_id}")

    except Exception as e:
        logger.error(f"Error in category_handler: {str(e)}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=create_base_keyboard()
        )

async def show_product_category(message: Message, state: FSMContext, category: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        user_id = message.from_user.id
        logger.info(f"Showing products for category {category} to user {user_id}")

        db = get_db()
        products = db.query(Product).filter(
            Product.category == category,
            Product.available == True
        ).all()

        logger.info(f"Found {len(products)} products in category {category}")

        if not products:
            await message.answer(
                "üòî –í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                reply_markup=create_base_keyboard()
            )
            return

        for product in products:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Ä—è–¥–∫—É
            photos = sorted(product.photos, key=lambda x: x.sort_order)

            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            description = (
                f"üì¶ {product.name}\n"
                f"üí∞ –¶–µ–Ω–∞: {product.price:,.2f} —Ä—É–±.\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
                f"‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {product.specifications}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            if photos:
                keyboard_buttons = []

                # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                if len(photos) > 1:
                    previews = []
                    for i, photo in enumerate(photos):
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å callback_data –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–≤—å—é
                        previews.append(
                            InlineKeyboardButton(
                                text=f"üì∑ {i+1}",  # –ù–æ–º–µ—Ä —Ñ–æ—Ç–æ –≤ –≤–∏–¥–µ emoji
                                callback_data=f"photo_preview_{product.id}_{i}"
                            )
                        )
                    keyboard_buttons.append(previews)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                        callback_data=f"add_to_cart_{product.id}"
                    )
                ])

                keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

                await message.answer_photo(
                    photo=photos[0].photo_url,
                    caption=description,
                    reply_markup=keyboard,
                    width=400,  # –†–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ
                    height=300
                )
            else:
                await message.answer(description)

            logger.info(f"Sent product {product.id} info to user {user_id}")

        # –í –∫–æ–Ω—Ü–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_base_keyboard()
        )

    except Exception as e:
        logger.error(f"Error in show_product_category: {str(e)}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=create_base_keyboard()
        )

async def handle_photo_navigation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"Handling photo navigation callback: {callback.data}")

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        parts = callback.data.split('_')
        if len(parts) < 4:
            logger.error(f"Invalid callback data format: {callback.data}")
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        action = parts[0]  # photo
        preview = parts[1]  # preview
        product_id = int(parts[2])
        new_index = int(parts[3])

        logger.info(f"Preview navigation: product_id={product_id}, target_index={new_index}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        db = get_db()
        product = db.query(Product).filter(Product.id == product_id).first()
        if not product:
            logger.error(f"Product not found: {product_id}")
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photos = sorted(product.photos, key=lambda x: x.sort_order)
        if not photos:
            logger.error(f"No photos found for product: {product_id}")
            await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        logger.info(f"Found {len(photos)} photos for product {product_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
        if new_index < 0 or new_index >= len(photos):
            logger.error(f"Invalid photo index: {new_index}")
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–≤—å—é –∏ –∫–Ω–æ–ø–∫–æ–π –∫–æ—Ä–∑–∏–Ω—ã
        keyboard_buttons = []

        # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        if len(photos) > 1:
            previews = []
            for i, photo in enumerate(photos):
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å callback_data –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–≤—å—é
                previews.append(
                    InlineKeyboardButton(
                        text=f"üì∑ {i+1}",  # –ù–æ–º–µ—Ä —Ñ–æ—Ç–æ –≤ –≤–∏–¥–µ emoji
                        callback_data=f"photo_preview_{product_id}_{i}"
                    )
                )
            keyboard_buttons.append(previews)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=f"add_to_cart_{product.id}"
            )
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = (
            f"üì¶ {product.name}\n"
            f"üí∞ –¶–µ–Ω–∞: {product.price:,.2f} —Ä—É–±.\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
            f"‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {product.specifications}"
        )

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=photos[new_index].photo_url,
                    caption=description
                ),
                reply_markup=keyboard
            )
            logger.info(f"Successfully updated photo to index {new_index}")
        except Exception as e:
            logger.error(f"Error updating media: {str(e)}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
            return

        await callback.answer()
        logger.info("Photo navigation completed successfully")

    except Exception as e:
        logger.error(f"Error in handle_photo_navigation: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ")

async def process_cart_checkout(message:Message, state: FSMContext):
    # Placeholder for checkout logic.  Implementation details omitted as not provided in the edited snippet
    await message.answer("Checkout functionality not yet implemented.")
    await state.clear()