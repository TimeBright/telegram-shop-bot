"""Admin handlers module for the shop."""
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from .states import ShopStates
from .database import get_db
from .models import Product, Order

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

async def handle_add_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        await state.update_data(new_product_name=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(ShopStates.WAITING_FOR_PRODUCT_DESCRIPTION)
    except Exception as e:
        logger.error(f"Error in handle_add_product_name: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def handle_add_product_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        await state.update_data(new_product_description=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        await state.set_state(ShopStates.WAITING_FOR_PRODUCT_PRICE)
    except Exception as e:
        logger.error(f"Error in handle_add_product_description: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def handle_add_product_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        try:
            price = float(message.text)
            if price <= 0:
                raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã")
            return

        await state.update_data(new_product_price=price)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="üíÜ‚Äç‚ôÄÔ∏è –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è"),
                    KeyboardButton(text="üîß –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞")
                ],
                [KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")]
            ],
            resize_keyboard=True,
            persistent=True
        )

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=category_keyboard
        )
        await state.set_state(ShopStates.WAITING_FOR_PRODUCT_CATEGORY)
    except Exception as e:
        logger.error(f"Error in handle_add_product_price: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def handle_add_product_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        if message.text == "üîô –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            await message.answer(
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=create_product_management_keyboard()
            )
            return

        category = None
        if message.text == "üíÜ‚Äç‚ôÄÔ∏è –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è":
            category = "cosmetics"
        elif message.text == "üîß –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞":
            category = "electronics"
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞")
            return

        await state.update_data(new_product_category=category)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(ShopStates.WAITING_FOR_PRODUCT_SPECIFICATIONS)
    except Exception as e:
        logger.error(f"Error in handle_add_product_category: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def handle_add_product_specifications(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        user_data = await state.get_data()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        new_product = Product(
            name=user_data['new_product_name'],
            description=user_data['new_product_description'],
            price=user_data['new_product_price'],
            category=user_data['new_product_category'],
            specifications=message.text,
            available=True
        )

        db = get_db()
        db.add(new_product)
        db.commit()

        await message.answer(
            "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

    except Exception as e:
        logger.error(f"Error in handle_add_product_specifications: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
def create_admin_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"),
                KeyboardButton(text="üìã –ó–∞–∫–∞–∑—ã")
            ],
            [
                KeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å—ã"),
                KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            ],
            [KeyboardButton(text="üîô –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard

def create_product_management_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"),
                KeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
            ],
            [
                KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"),
                KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
            ],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard

async def admin_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    try:
        user_id = message.from_user.id
        logger.info(f"Admin panel accessed by user {user_id}")

        await message.answer(
            "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:"
        )
        await state.set_state(ShopStates.WAITING_FOR_ADMIN_AUTH_CODE)
        logger.info(f"Waiting for auth code from user {user_id}")

    except Exception as e:
        logger.error(f"Error in admin_start: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

async def check_auth_code(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        user_id = message.from_user.id
        auth_code = message.text

        # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if auth_code == "admin123":  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.info(f"Admin authentication successful for user {user_id}")

            await message.answer(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=create_admin_keyboard()
            )
            await state.set_state(ShopStates.ADMIN_MENU)

        else:
            logger.warning(f"Invalid auth code attempt from user {user_id}")
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            )
            await state.clear()

    except Exception as e:
        logger.error(f"Error in check_auth_code: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        )
        await state.clear()

async def handle_admin_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        user_id = message.from_user.id
        logger.info(f"Admin menu selection from user {user_id}: {message.text}")

        current_state = await state.get_state()
        if current_state != ShopStates.ADMIN_MENU.state:
            logger.warning(f"Invalid state for admin menu: {current_state}")
            return

        if message.text == "üîô –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
            await state.clear()
            await message.answer(
                "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="/start")]],
                    resize_keyboard=True
                )
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
        if message.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏":
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            await message.answer(
                "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_product_management_keyboard()
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
        menu_responses = {
            "üìã –ó–∞–∫–∞–∑—ã": "–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤:",
            "‚ùì –í–æ–ø—Ä–æ—Å—ã": "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:"
        }

        response = menu_responses.get(
            message.text,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"
        )
        await message.answer(response, reply_markup=create_admin_keyboard())

    except Exception as e:
        logger.error(f"Error in handle_admin_menu: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã",
            reply_markup=create_admin_keyboard()
        )

async def handle_product_management(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    try:
        user_id = message.from_user.id
        logger.info(f"Product management action from user {user_id}: {message.text}")

        current_state = await state.get_state()
        if current_state != ShopStates.ADMIN_PRODUCTS.state:
            logger.warning(f"Invalid state for product management: {current_state}")
            return

        if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é":
            await state.set_state(ShopStates.ADMIN_MENU)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=create_admin_keyboard()
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        action_handlers = {
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä": (
                ShopStates.WAITING_FOR_PRODUCT_NAME,
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:"
            ),
            "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä": (
                ShopStates.EDITING_PRODUCT,
                show_products_for_editing
            ),
            "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä": (
                ShopStates.WAITING_FOR_PRODUCT_ID_TO_DELETE,
                show_products_for_deletion
            ),
            "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤": (None, show_products_list)
        }

        if message.text in action_handlers:
            next_state, handler = action_handlers[message.text]
            if next_state:
                await state.set_state(next_state)

            if callable(handler):
                await handler(message)
            else:
                await message.answer(handler)

            logger.info(f"Product management state set to {next_state} for user {user_id}")
        else:
            await message.answer(
                "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é",
                reply_markup=create_product_management_keyboard()
            )

    except Exception as e:
        logger.error(f"Error in handle_product_management: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞–º–∏",
            reply_markup=create_product_management_keyboard()
        )

async def show_products_for_editing(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        db = get_db()
        products = db.query(Product).all()

        if not products:
            await message.answer(
                "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                reply_markup=create_product_management_keyboard()
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        product_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=f"ID:{product.id} - {product.name}")]
                for product in products
            ] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏")]],
            resize_keyboard=True,
            persistent=True
        )

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=product_keyboard
        )

    except Exception as e:
        logger.error(f"Error in show_products_for_editing: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=create_product_management_keyboard()
        )

async def show_products_list(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        db = get_db()
        products = db.query(Product).all()

        if not products:
            await message.answer(
                "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç",
                reply_markup=create_product_management_keyboard()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        products_text = "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        for product in products:
            products_text += (
                f"üì¶ {product.name}\n"
                f"ID: {product.id}\n"
                f"üí∞ –¶–µ–Ω–∞: {product.price:,.2f} —Ä—É–±.\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
                f"‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {product.specifications}\n"
                f"{'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if product.available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n\n"
            )

        await message.answer(
            products_text,
            reply_markup=create_product_management_keyboard()
        )

    except Exception as e:
        logger.error(f"Error in show_products_list: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=create_product_management_keyboard()
        )

async def handle_product_editing(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"Starting product editing for user {user_id}, message: {message.text}")

        if message.text == "üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏":
            logger.info(f"User {user_id} returning to product management")
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_product_management_keyboard()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ID —Ç–æ–≤–∞—Ä–∞
        if message.text.startswith(("üìù", "üí∞", "üìã", "‚öôÔ∏è", "‚úÖ")):
            # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–µ—Ä–µ–¥–∞–µ–º –µ—ë –≤ handle_edit_field
            await handle_edit_field(message, state)
            return

        if "ID:" not in message.text:
            logger.warning(f"Invalid product selection format from user {user_id}: {message.text}")
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞",
                reply_markup=create_product_management_keyboard()
            )
            return

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç "ID:X - –ù–∞–∑–≤–∞–Ω–∏–µ")
            product_id = int(message.text.split("ID:")[1].split("-")[0].strip())
            logger.info(f"Extracted product ID: {product_id} for editing")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db = get_db()
            product = db.query(Product).filter(Product.id == product_id).first()
            logger.info(f"Retrieved product from database: {product.name if product else 'Not found'}")

            if not product:
                logger.warning(f"Product with ID {product_id} not found in database")
                await message.answer(
                    "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=create_product_management_keyboard()
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(editing_product_id=product_id)
            logger.info(f"Saved product ID {product_id} in state for user {user_id}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            edit_keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"),
                        KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É")
                    ],
                    [
                        KeyboardButton(text="üìã –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"),
                        KeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
                    ],
                    [
                        KeyboardButton(text="‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"),
                        KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤")
                    ]
                ],
                resize_keyboard=True,
                persistent=True
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            product_info = (
                f"üì¶ –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
                f"–¶–µ–Ω–∞: {product.price:,.2f} —Ä—É–±.\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
                f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {product.specifications}\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if product.available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
            )

            await message.answer(product_info, reply_markup=edit_keyboard)
            logger.info(f"Sent product editing menu for product {product_id} to user {user_id}")

        except (ValueError, IndexError) as e:
            logger.error(f"Error extracting product ID: {str(e)}, message: {message.text}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ ID —Ç–æ–≤–∞—Ä–∞",
                reply_markup=create_product_management_keyboard()
            )
            return

    except Exception as e:
        logger.error(f"Error in handle_product_editing: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=create_product_management_keyboard()
        )

async def handle_edit_field(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"Starting edit field handler for user {user_id}, message: {message.text}")

        user_data = await state.get_data()
        product_id = user_data.get('editing_product_id')
        logger.info(f"Retrieved product_id from state: {product_id}")

        if not product_id:
            logger.error(f"No product_id found in state for user {user_id}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω",
                reply_markup=create_product_management_keyboard()
            )
            return

        db = get_db()
        product = db.query(Product).filter(Product.id == product_id).first()
        logger.info(f"Retrieved product from database: {product.name if product else 'Not found'}")

        if not product:
            logger.error(f"Product with ID {product_id} not found in database")
            await message.answer(
                "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=create_product_management_keyboard()
            )
            return

        if message.text == "üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤":
            logger.info(f"User {user_id} returning to product list")
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_product_management_keyboard()
            )
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        field_states = {
            "üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ": ShopStates.WAITING_FOR_NEW_PRODUCT_NAME,
            "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É": ShopStates.WAITING_FOR_NEW_PRODUCT_PRICE,
            "üìã –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ": ShopStates.WAITING_FOR_NEW_PRODUCT_DESCRIPTION,
            "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": ShopStates.WAITING_FOR_NEW_PRODUCT_SPECS,
            "‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å": None  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
        }

        if message.text == "‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å":
            logger.info(f"Changing availability for product {product_id}")
            # –ú–µ–Ω—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é
            old_status = product.available
            product.available = not product.available
            try:
                db.commit()
                logger.info(f"Successfully changed product {product_id} availability from {old_status} to {product.available}")
                status = "‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω" if product.available else "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                await message.answer(
                    f"–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å —Ç–æ–≤–∞—Ä {status}",
                    reply_markup=create_product_management_keyboard()
                )
                await state.set_state(ShopStates.ADMIN_PRODUCTS)
            except Exception as e:
                logger.error(f"Failed to update product availability: {str(e)}", exc_info=True)
                db.rollback()
                await message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞",
                    reply_markup=create_product_management_keyboard()
                )
            return

        next_state = field_states.get(message.text)
        if next_state:
            logger.info(f"Setting state to {next_state} for user {user_id}")
            await state.set_state(next_state)
            field_prompts = {
                ShopStates.WAITING_FOR_NEW_PRODUCT_NAME: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
                ShopStates.WAITING_FOR_NEW_PRODUCT_PRICE: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
                ShopStates.WAITING_FOR_NEW_PRODUCT_DESCRIPTION: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
                ShopStates.WAITING_FOR_NEW_PRODUCT_SPECS: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞:"
            }
            await message.answer(field_prompts[next_state])
        else:
            logger.warning(f"Unknown action selected: {message.text}")
            await message.answer(
                "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é",
                reply_markup=create_product_management_keyboard()
            )

    except Exception as e:
        logger.error(f"Error in handle_edit_field: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def process_new_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"Processing new product name for user {user_id}: {message.text}")

        user_data = await state.get_data()
        product_id = user_data.get('editing_product_id')
        logger.info(f"Retrieved product_id from state: {product_id}")

        db = get_db()
        product = db.query(Product).filter(Product.id == product_id).first()

        if not product:
            logger.error(f"Product with ID {product_id} not found")
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            return

        old_name = product.name
        product.name = message.text
        try:
            db.commit()
            logger.info(f"Successfully updated product {product_id} name from '{old_name}' to '{message.text}'")
            await message.answer(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n{message.text}",
                reply_markup=create_product_management_keyboard()
            )
        except Exception as e:
            logger.error(f"Failed to update product name: {str(e)}", exc_info=True)
            db.rollback()
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è",
                reply_markup=create_product_management_keyboard()
            )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

    except Exception as e:
        logger.error(f"Error in process_new_product_name: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def process_new_product_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"Processing new product price for user {user_id}: {message.text}")

        try:
            new_price = float(message.text)
            if new_price <= 0:
                raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        except ValueError as e:
            logger.warning(f"Invalid price value: {message.text}")
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã",
                reply_markup=create_product_management_keyboard()
            )
            return

        user_data = await state.get_data()
        product_id = user_data.get('editing_product_id')
        logger.info(f"Retrieved product_id from state: {product_id}")

        db = get_db()
        product = db.query(Product).filter(Product.id == product_id).first()

        if not product:
            logger.error(f"Product with ID {product_id} not found")
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            return

        old_price = product.price
        product.price = new_price
        try:
            db.commit()
            logger.info(f"Successfully updated product {product_id} price from {old_price} to {new_price}")
            await message.answer(
                f"‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_price:,.2f} —Ä—É–±.",
                reply_markup=create_product_management_keyboard()
            )
        except Exception as e:
            logger.error(f"Failed to update product price: {str(e)}", exc_info=True)
            db.rollback()
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã",
                reply_markup=create_product_management_keyboard()
            )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

    except Exception as e:
        logger.error(f"Error in process_new_product_price: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def process_new_product_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"Processing new product description for user {user_id}")

        user_data = await state.get_data()
        product_id = user_data.get('editing_product_id')
        logger.info(f"Retrieved product_id from state: {product_id}")

        db = get_db()
        product = db.query(Product).filter(Product.id == product_id).first()

        if not product:
            logger.error(f"Product with ID {product_id} not found")
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            return

        old_description = product.description
        product.description = message.text
        try:
            db.commit()
            logger.info(f"Successfully updated product {product_id} description")
            await message.answer(
                f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n{message.text}",
                reply_markup=create_product_management_keyboard()
            )
        except Exception as e:
            logger.error(f"Failed to update product description: {str(e)}", exc_info=True)
            db.rollback()
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è",
                reply_markup=create_product_management_keyboard()
            )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

    except Exception as e:
        logger.error(f"Error in process_new_product_description: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def process_new_product_specifications(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"Processing new product specifications for user {user_id}")

        user_data = await state.get_data()
        product_id = user_data.get('editing_product_id')
        logger.info(f"Retrieved product_id from state: {product_id}")

        db = get_db()
        product = db.query(Product).filter(Product.id == product_id).first()

        if not product:
            logger.error(f"Product with ID {product_id} not found")
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            return

        old_specs = product.specifications
        product.specifications = message.text
        try:
            db.commit()
            logger.info(f"Successfully updated product {product_id} specifications")
            await message.answer(
                f"‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞:\n{message.text}",
                reply_markup=create_product_management_keyboard()
            )
        except Exception as e:
            logger.error(f"Failed to update product specifications: {str(e)}", exc_info=True)
            db.rollback()
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
                reply_markup=create_product_management_keyboard()
            )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

    except Exception as e:
        logger.error(f"Error in process_new_product_specifications: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def show_products_for_deletion(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        db = get_db()
        products = db.query(Product).all()

        if not products:
            await message.answer(                "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                reply_markup=create_product_management_keyboard()
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        product_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=f"‚ùå {product.name} (ID: {product.id})")]
                for product in products
            ] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏")]],
            resize_keyboard=True,
            persistent=True
        )

        await message.answer(
            "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
            "(—ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å)",
            reply_markup=product_keyboard
        )

    except Exception as e:
        logger.error(f"Error in show_products_for_deletion: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=create_product_management_keyboard()
        )

async def handle_product_deletion(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        if message.text == "üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏":
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_product_management_keyboard()
            )
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if not message.text.startswith("‚ùå "):
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞",
                reply_markup=create_product_management_keyboard()
            )
            return

        try:
            product_id = int(message.text.split("ID: ")[-1].rstrip(")"))
        except (ValueError, IndexError):
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ ID —Ç–æ–≤–∞—Ä–∞",
                reply_markup=create_product_management_keyboard()
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = get_db()
        product = db.query(Product).filter(Product.id == product_id).first()

        if not product:
            await message.answer(
                "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=create_product_management_keyboard()
            )
            return

        product_name = product.name
        db.delete(product)
        db.commit()

        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

    except Exception as e:
        logger.error(f"Error in handle_product_deletion: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def register_admin_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        logger.info("Starting admin handlers registration")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /admin –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        dp.message.register(admin_start, Command("admin"))
        dp.message.register(check_auth_code, ShopStates.WAITING_FOR_ADMIN_AUTH_CODE)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é
        dp.message.register(handle_admin_menu, ShopStates.ADMIN_MENU)
        dp.message.register(handle_product_management, ShopStates.ADMIN_PRODUCTS)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        dp.message.register(handle_add_product_name, ShopStates.WAITING_FOR_PRODUCT_NAME)
        dp.message.register(handle_add_product_description, ShopStates.WAITING_FOR_PRODUCT_DESCRIPTION)
        dp.message.register(handle_add_product_price, ShopStates.WAITING_FOR_PRODUCT_PRICE)
        dp.message.register(handle_add_product_category, ShopStates.WAITING_FOR_PRODUCT_CATEGORY)
        dp.message.register(handle_add_product_specifications, ShopStates.WAITING_FOR_PRODUCT_SPECIFICATIONS)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        dp.message.register(handle_product_editing, ShopStates.EDITING_PRODUCT)
        dp.message.register(process_new_product_name, ShopStates.WAITING_FOR_NEW_PRODUCT_NAME)
        dp.message.register(process_new_product_price, ShopStates.WAITING_FOR_NEW_PRODUCT_PRICE)
        dp.message.register(process_new_product_description, ShopStates.WAITING_FOR_NEW_PRODUCT_DESCRIPTION)
        dp.message.register(process_new_product_specifications, ShopStates.WAITING_FOR_NEW_PRODUCT_SPECS)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        dp.message.register(handle_product_deletion, ShopStates.WAITING_FOR_PRODUCT_ID_TO_DELETE)

        logger.info("All admin handlers registered successfully")

    except Exception as e:
        logger.error(f"Error registering admin handlers: {str(e)}")
        raise

async def handle_product_editing(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"Starting product editing for user {user_id}, message: {message.text}")

        if message.text == "üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏":
            logger.info(f"User {user_id} returning to product management")
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_product_management_keyboard()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ID —Ç–æ–≤–∞—Ä–∞
        if message.text.startswith(("üìù", "üí∞", "üìã", "‚öôÔ∏è", "‚úÖ")):
            # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–µ—Ä–µ–¥–∞–µ–º –µ—ë –≤ handle_edit_field
            await handle_edit_field(message, state)
            return

        if "ID:" not in message.text:
            logger.warning(f"Invalid product selection format from user {user_id}: {message.text}")
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞",
                reply_markup=create_product_management_keyboard()
            )
            return

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç "ID:X - –ù–∞–∑–≤–∞–Ω–∏–µ")
            product_id = int(message.text.split("ID:")[1].split("-")[0].strip())
            logger.info(f"Extracted product ID: {product_id} for editing")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db = get_db()
            product = db.query(Product).filter(Product.id == product_id).first()
            logger.info(f"Retrieved product from database: {product.name if product else 'Not found'}")

            if not product:
                logger.warning(f"Product with ID {product_id} not found in database")
                await message.answer(
                    "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=create_product_management_keyboard()
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(editing_product_id=product_id)
            logger.info(f"Saved product ID {product_id} in state for user {user_id}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            edit_keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"),
                        KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É")
                    ],
                    [
                        KeyboardButton(text="üìã –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"),
                        KeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
                    ],
                    [
                        KeyboardButton(text="‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"),
                        KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤")
                    ]
                ],
                resize_keyboard=True,
                persistent=True
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            product_info = (
                f"üì¶ –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
                f"–¶–µ–Ω–∞: {product.price:,.2f} —Ä—É–±.\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
                f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {product.specifications}\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if product.available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
            )

            await message.answer(product_info, reply_markup=edit_keyboard)
            logger.info(f"Sent product editing menu for product {product_id} to user {user_id}")

        except (ValueError, IndexError) as e:
            logger.error(f"Error extracting product ID: {str(e)}, message: {message.text}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ ID —Ç–æ–≤–∞—Ä–∞",
                reply_markup=create_product_management_keyboard()
            )
            return

    except Exception as e:
        logger.error(f"Error in handle_product_editing: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=create_product_management_keyboard()
        )

async def handle_edit_field(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"Starting edit field handler for user {user_id}, message: {message.text}")

        user_data = await state.get_data()
        product_id = user_data.get('editing_product_id')
        logger.info(f"Retrieved product_id from state: {product_id}")

        if not product_id:
            logger.error(f"No product_id found in state for user {user_id}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω",
                reply_markup=create_product_management_keyboard()
            )
            return

        db = get_db()
        product = db.query(Product).filter(Product.id == product_id).first()
        logger.info(f"Retrieved product from database: {product.name if product else 'Not found'}")

        if not product:
            logger.error(f"Product with ID {product_id} not found in database")
            await message.answer(
                "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=create_product_management_keyboard()
            )
            return

        if message.text == "üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤":
            logger.info(f"User {user_id} returning to product list")
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_product_management_keyboard()
            )
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        field_states = {
            "üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ": ShopStates.WAITING_FOR_NEW_PRODUCT_NAME,
            "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É": ShopStates.WAITING_FOR_NEW_PRODUCT_PRICE,
            "üìã –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ": ShopStates.WAITING_FOR_NEW_PRODUCT_DESCRIPTION,
            "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": ShopStates.WAITING_FOR_NEW_PRODUCT_SPECS,
            "‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å": None  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
        }

        if message.text == "‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å":
            logger.info(f"Changing availability for product {product_id}")
            # –ú–µ–Ω—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é
            old_status = product.available
            product.available = not product.available
            try:
                db.commit()
                logger.info(f"Successfully changed product {product_id} availability from {old_status} to {product.available}")
                status = "‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω" if product.available else "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                await message.answer(
                    f"–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å —Ç–æ–≤–∞—Ä {status}",
                    reply_markup=create_product_management_keyboard()
                )
                await state.set_state(ShopStates.ADMIN_PRODUCTS)
            except Exception as e:
                logger.error(f"Failed to update product availability: {str(e)}", exc_info=True)
                db.rollback()
                await message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞",
                    reply_markup=create_product_management_keyboard()
                )
            return

        next_state = field_states.get(message.text)
        if next_state:
            logger.info(f"Setting state to {next_state} for user {user_id}")
            await state.set_state(next_state)
            field_prompts = {
                ShopStates.WAITING_FOR_NEW_PRODUCT_NAME: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
                ShopStates.WAITING_FOR_NEW_PRODUCT_PRICE: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
                ShopStates.WAITING_FOR_NEW_PRODUCT_DESCRIPTION: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
                ShopStates.WAITING_FOR_NEW_PRODUCT_SPECS: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞:"
            }
            await message.answer(field_prompts[next_state])
        else:
            logger.warning(f"Unknown action selected: {message.text}")
            await message.answer(
                "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é",
                reply_markup=create_product_management_keyboard()
            )

    except Exception as e:
        logger.error(f"Error in handle_edit_field: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def process_new_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"Processing new product name for user {user_id}: {message.text}")

        user_data = await state.get_data()
        product_id = user_data.get('editing_product_id')
        logger.info(f"Retrieved product_id from state: {product_id}")

        db = get_db()
        product = db.query(Product).filter(Product.id == product_id).first()

        if not product:
            logger.error(f"Product with ID {product_id} not found")
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            return

        old_name = product.name
        product.name = message.text
        try:
            db.commit()
            logger.info(f"Successfully updated product {product_id} name from '{old_name}' to '{message.text}'")
            await message.answer(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n{message.text}",
                reply_markup=create_product_management_keyboard()
            )
        except Exception as e:
            logger.error(f"Failed to update product name: {str(e)}", exc_info=True)
            db.rollback()
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è",
                reply_markup=create_product_management_keyboard()
            )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

    except Exception as e:
        logger.error(f"Error in process_new_product_name: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def process_new_product_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"Processing new product price for user {user_id}: {message.text}")

        try:
            new_price = float(message.text)
            if new_price <= 0:
                raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        except ValueError as e:
            logger.warning(f"Invalid price value: {message.text}")
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã",
                reply_markup=create_product_management_keyboard()
            )
            return

        user_data = await state.get_data()
        product_id = user_data.get('editing_product_id')
        logger.info(f"Retrieved product_id from state: {product_id}")

        db = get_db()
        product = db.query(Product).filter(Product.id == product_id).first()

        if not product:
            logger.error(f"Product with ID {product_id} not found")
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            return

        old_price = product.price
        product.price = new_price
        try:
            db.commit()
            logger.info(f"Successfully updated product {product_id} price from {old_price} to {new_price}")
            await message.answer(
                f"‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_price:,.2f} —Ä—É–±.",
                reply_markup=create_product_management_keyboard()
            )
        except Exception as e:
            logger.error(f"Failed to update product price: {str(e)}", exc_info=True)
            db.rollback()
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã",
                reply_markup=create_product_management_keyboard()
            )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

    except Exception as e:
        logger.error(f"Error in process_new_product_price: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def process_new_product_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"Processing new product description for user {user_id}")

        user_data = await state.get_data()
        product_id = user_data.get('editing_product_id')
        logger.info(f"Retrieved product_id from state: {product_id}")

        db = get_db()
        product = db.query(Product).filter(Product.id == product_id).first()

        if not product:
            logger.error(f"Product with ID {product_id} not found")
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            return

        old_description = product.description
        product.description = message.text
        try:
            db.commit()
            logger.info(f"Successfully updated product {product_id} description")
            await message.answer(
                f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n{message.text}",
                reply_markup=create_product_management_keyboard()
            )
        except Exception as e:
            logger.error(f"Failed to update product description: {str(e)}", exc_info=True)
            db.rollback()
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è",
                reply_markup=create_product_management_keyboard()
            )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

    except Exception as e:
        logger.error(f"Error in process_new_product_description: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def process_new_product_specifications(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"Processing new product specifications for user {user_id}")

        user_data = await state.get_data()
        product_id = user_data.get('editing_product_id')
        logger.info(f"Retrieved product_id from state: {product_id}")

        db = get_db()
        product = db.query(Product).filter(Product.id == product_id).first()

        if not product:
            logger.error(f"Product with ID {product_id} not found")
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            return

        old_specs = product.specifications
        product.specifications = message.text
        try:
            db.commit()
            logger.info(f"Successfully updated product {product_id} specifications")
            await message.answer(
                f"‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞:\n{message.text}",
                reply_markup=create_product_management_keyboard()
            )
        except Exception as e:
            logger.error(f"Failed to update product specifications: {str(e)}", exc_info=True)
            db.rollback()
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
                reply_markup=create_product_management_keyboard()
            )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

    except Exception as e:
        logger.error(f"Error in process_new_product_specifications: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def show_products_for_deletion(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        db = get_db()
        products = db.query(Product).all()

        if not products:
            await message.answer(
                "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                reply_markup=create_product_management_keyboard()
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        product_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=f"‚ùå {product.name} (ID: {product.id})")]
                for product in products
            ] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏")]],
            resize_keyboard=True,
            persistent=True
        )

        await message.answer(
            "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
            "(—ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å)",
            reply_markup=product_keyboard
        )

    except Exception as e:
        logger.error(f"Error in show_products_for_deletion: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=create_product_management_keyboard()
        )

async def handle_product_deletion(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        if message.text == "üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏":
            await state.set_state(ShopStates.ADMIN_PRODUCTS)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_product_management_keyboard()
            )
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if not message.text.startswith("‚ùå "):
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞",
                reply_markup=create_product_management_keyboard()
            )
            return

        try:
            product_id = int(message.text.split("ID: ")[-1].rstrip(")"))
        except (ValueError, IndexError):
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ ID —Ç–æ–≤–∞—Ä–∞",
                reply_markup=create_product_management_keyboard()
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = get_db()
        product = db.query(Product).filter(Product.id == product_id).first()

        if not product:
            await message.answer(
                "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=create_product_management_keyboard()
            )
            return

        product_name = product.name
        db.delete(product)
        db.commit()

        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

    except Exception as e:
        logger.error(f"Error in handle_product_deletion: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=create_product_management_keyboard()
        )
        await state.set_state(ShopStates.ADMIN_PRODUCTS)

async def register_admin_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        logger.info("Starting admin handlers registration")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /admin –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        dp.message.register(admin_start, Command("admin"))
        dp.message.register(check_auth_code, ShopStates.WAITING_FOR_ADMIN_AUTH_CODE)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é
        dp.message.register(handle_admin_menu, ShopStates.ADMIN_MENU)
        dp.message.register(handle_product_management, ShopStates.ADMIN_PRODUCTS)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        dp.message.register(handle_add_product_name, ShopStates.WAITING_FOR_PRODUCT_NAME)
        dp.message.register(handle_add_product_description, ShopStates.WAITING_FOR_PRODUCT_DESCRIPTION)
        dp.message.register(handle_add_product_price, ShopStates.WAITING_FOR_PRODUCT_PRICE)
        dp.message.register(handle_add_product_category, ShopStates.WAITING_FOR_PRODUCT_CATEGORY)
        dp.message.register(handle_add_product_specifications, ShopStates.WAITING_FOR_PRODUCT_SPECIFICATIONS)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        dp.message.register(handle_product_editing, ShopStates.EDITING_PRODUCT)
        dp.message.register(process_new_product_name, ShopStates.WAITING_FOR_NEW_PRODUCT_NAME)
        dp.message.register(process_new_product_price, ShopStates.WAITING_FOR_NEW_PRODUCT_PRICE)
        dp.message.register(process_new_product_description, ShopStates.WAITING_FOR_NEW_PRODUCT_DESCRIPTION)
        dp.message.register(process_new_product_specifications, ShopStates.WAITING_FOR_NEW_PRODUCT_SPECS)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        dp.message.register(handle_product_deletion, ShopStates.WAITING_FOR_PRODUCT_ID_TO_DELETE)

        logger.info("All admin handlers registered successfully")

    except Exception as e:
        logger.error(f"Error registering admin handlers: {str(e)}")
        raise